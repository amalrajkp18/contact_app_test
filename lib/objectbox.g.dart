// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/contat_entity/contact_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2858517984163476982),
      name: 'ContactEntity',
      lastPropertyId: const obx_int.IdUid(9, 4110220484911269218),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 169792365781722793),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1816541519157807466),
            name: 'imageData',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5717404571643683563),
            name: 'fullName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 432551545462445411),
            name: 'emailAddress',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3450352558753756937),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1013259470201333080),
            name: 'lat',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3421635607772646235),
            name: 'long',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4110220484911269218),
            name: 'phoneNumber',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 2858517984163476982),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [843615088343899685],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ContactEntity: obx_int.EntityDefinition<ContactEntity>(
        model: _entities[0],
        toOneRelations: (ContactEntity object) => [],
        toManyRelations: (ContactEntity object) => {},
        getId: (ContactEntity object) => object.id,
        setId: (ContactEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ContactEntity object, fb.Builder fbb) {
          final imageDataOffset = object.imageData == null
              ? null
              : fbb.writeListInt8(object.imageData!);
          final fullNameOffset = fbb.writeString(object.fullName);
          final emailAddressOffset = object.emailAddress == null
              ? null
              : fbb.writeString(object.emailAddress!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final phoneNumberOffset = fbb.writeString(object.phoneNumber);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imageDataOffset);
          fbb.addOffset(2, fullNameOffset);
          fbb.addOffset(4, emailAddressOffset);
          fbb.addOffset(5, addressOffset);
          fbb.addFloat64(6, object.lat);
          fbb.addFloat64(7, object.long);
          fbb.addOffset(8, phoneNumberOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final imageDataParam = const fb.Uint8ListReader(lazy: false)
              .vTableGetNullable(buffer, rootOffset, 6) as Uint8List?;
          final fullNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final phoneNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final emailAddressParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final latParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final longParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final object = ContactEntity(
              id: idParam,
              imageData: imageDataParam,
              fullName: fullNameParam,
              phoneNumber: phoneNumberParam,
              address: addressParam,
              emailAddress: emailAddressParam,
              lat: latParam,
              long: longParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ContactEntity] entity fields to define ObjectBox queries.
class ContactEntity_ {
  /// See [ContactEntity.id].
  static final id =
      obx.QueryIntegerProperty<ContactEntity>(_entities[0].properties[0]);

  /// See [ContactEntity.imageData].
  static final imageData =
      obx.QueryByteVectorProperty<ContactEntity>(_entities[0].properties[1]);

  /// See [ContactEntity.fullName].
  static final fullName =
      obx.QueryStringProperty<ContactEntity>(_entities[0].properties[2]);

  /// See [ContactEntity.emailAddress].
  static final emailAddress =
      obx.QueryStringProperty<ContactEntity>(_entities[0].properties[3]);

  /// See [ContactEntity.address].
  static final address =
      obx.QueryStringProperty<ContactEntity>(_entities[0].properties[4]);

  /// See [ContactEntity.lat].
  static final lat =
      obx.QueryDoubleProperty<ContactEntity>(_entities[0].properties[5]);

  /// See [ContactEntity.long].
  static final long =
      obx.QueryDoubleProperty<ContactEntity>(_entities[0].properties[6]);

  /// See [ContactEntity.phoneNumber].
  static final phoneNumber =
      obx.QueryStringProperty<ContactEntity>(_entities[0].properties[7]);
}
